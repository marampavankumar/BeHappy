{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1db945f8",
   "metadata": {},
   "source": [
    "**Read the Sales data set from file and check its info**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "408ff580",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7560 entries, 0 to 7559\n",
      "Data columns (total 6 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   Date    7560 non-null   datetime64[ns]\n",
      " 1   Time    7560 non-null   object        \n",
      " 2   State   7560 non-null   object        \n",
      " 3   Group   7560 non-null   object        \n",
      " 4   Unit    7560 non-null   int64         \n",
      " 5   Sales   7560 non-null   int64         \n",
      "dtypes: datetime64[ns](1), int64(2), object(3)\n",
      "memory usage: 354.5+ KB\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "df = pd.read_excel(\"1688639662_ausapparalsales4thqrt2020.xlsx\")\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "794f4371",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>State</th>\n",
       "      <th>Group</th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Kids</td>\n",
       "      <td>8</td>\n",
       "      <td>20000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Men</td>\n",
       "      <td>8</td>\n",
       "      <td>20000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Women</td>\n",
       "      <td>4</td>\n",
       "      <td>10000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>WA</td>\n",
       "      <td>Kids</td>\n",
       "      <td>3</td>\n",
       "      <td>7500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date        Time State     Group  Unit  Sales\n",
       "0 2020-10-01     Morning    WA      Kids     8  20000\n",
       "1 2020-10-01     Morning    WA       Men     8  20000\n",
       "2 2020-10-01     Morning    WA     Women     4  10000\n",
       "3 2020-10-01     Morning    WA   Seniors    15  37500\n",
       "4 2020-10-01   Afternoon    WA      Kids     3   7500"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9a02b156",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>State</th>\n",
       "      <th>Group</th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7555</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>14</td>\n",
       "      <td>35000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7556</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Kids</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7557</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Men</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7558</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Women</td>\n",
       "      <td>11</td>\n",
       "      <td>27500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7559</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>13</td>\n",
       "      <td>32500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date        Time State     Group  Unit  Sales\n",
       "7555 2020-12-30   Afternoon   TAS   Seniors    14  35000\n",
       "7556 2020-12-30     Evening   TAS      Kids    15  37500\n",
       "7557 2020-12-30     Evening   TAS       Men    15  37500\n",
       "7558 2020-12-30     Evening   TAS     Women    11  27500\n",
       "7559 2020-12-30     Evening   TAS   Seniors    13  32500"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3285724f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date     datetime64[ns]\n",
       "Time             object\n",
       "State            object\n",
       "Group            object\n",
       "Unit              int64\n",
       "Sales             int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7340f05f",
   "metadata": {},
   "source": [
    "**Data Wrangling**\n",
    "\n",
    "Check for nulls, data cleanliness, outliers, standardization/normalization for numerical data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "af4cf43d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date     0\n",
       "Time     0\n",
       "State    0\n",
       "Group    0\n",
       "Unit     0\n",
       "Sales    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for nulls\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "4ba28eac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-10-01 00:00:00\n",
      "2020-12-30 00:00:00\n"
     ]
    }
   ],
   "source": [
    "#check for minimum and maximum date\n",
    "print(df['Date'].min())\n",
    "print(df['Date'].max())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "536e100c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[' Morning' ' Afternoon' ' Evening']\n",
      "[' WA' ' NT' ' SA' ' VIC' ' QLD' ' NSW' ' TAS']\n",
      "[' Kids' ' Men' ' Women' ' Seniors']\n"
     ]
    }
   ],
   "source": [
    "#check distinct values in Time, State, Group columns\n",
    "print(df['Time'].unique())\n",
    "print(df['State'].unique())\n",
    "print(df['Group'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7380409b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Morning' 'Afternoon' 'Evening']\n",
      "['WA' 'NT' 'SA' 'VIC' 'QLD' 'NSW' 'TAS']\n",
      "['Kids' 'Men' 'Women' 'Seniors']\n"
     ]
    }
   ],
   "source": [
    "#Trim unwanted spaces at the beginning/end for Time, State, Group columns\n",
    "for i in ['Time', 'State', 'Group']:\n",
    "    df[i] = df[i].apply(lambda x: x.strip())\n",
    "    print(df[i].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6edca468",
   "metadata": {},
   "source": [
    "**Check for Outliers using boxplot and IQR range calculation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "026ecf69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Check for outliers in Sales using boxplot\n",
    "# some outliers are seen for sales which can be ignored\n",
    "import seaborn as sns\n",
    "sns.boxplot(data=df['Sales'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f42e1e3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20000.0 65000.0\n",
      "45000.0\n",
      "132500.0 -47500.0\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>State</th>\n",
       "      <th>Group</th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5082</th>\n",
       "      <td>2020-12-01</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Women</td>\n",
       "      <td>63</td>\n",
       "      <td>157500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5083</th>\n",
       "      <td>2020-12-01</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>62</td>\n",
       "      <td>155000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5161</th>\n",
       "      <td>2020-12-02</td>\n",
       "      <td>Morning</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Men</td>\n",
       "      <td>56</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5162</th>\n",
       "      <td>2020-12-02</td>\n",
       "      <td>Morning</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Women</td>\n",
       "      <td>59</td>\n",
       "      <td>147500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5169</th>\n",
       "      <td>2020-12-02</td>\n",
       "      <td>Evening</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Men</td>\n",
       "      <td>64</td>\n",
       "      <td>160000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7432</th>\n",
       "      <td>2020-12-29</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Kids</td>\n",
       "      <td>65</td>\n",
       "      <td>162500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7433</th>\n",
       "      <td>2020-12-29</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Men</td>\n",
       "      <td>54</td>\n",
       "      <td>135000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7437</th>\n",
       "      <td>2020-12-29</td>\n",
       "      <td>Evening</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Men</td>\n",
       "      <td>54</td>\n",
       "      <td>135000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7515</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Morning</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>65</td>\n",
       "      <td>162500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7519</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>VIC</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>62</td>\n",
       "      <td>155000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>123 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date       Time State    Group  Unit   Sales\n",
       "5082 2020-12-01  Afternoon   VIC    Women    63  157500\n",
       "5083 2020-12-01  Afternoon   VIC  Seniors    62  155000\n",
       "5161 2020-12-02    Morning   VIC      Men    56  140000\n",
       "5162 2020-12-02    Morning   VIC    Women    59  147500\n",
       "5169 2020-12-02    Evening   VIC      Men    64  160000\n",
       "...         ...        ...   ...      ...   ...     ...\n",
       "7432 2020-12-29  Afternoon   VIC     Kids    65  162500\n",
       "7433 2020-12-29  Afternoon   VIC      Men    54  135000\n",
       "7437 2020-12-29    Evening   VIC      Men    54  135000\n",
       "7515 2020-12-30    Morning   VIC  Seniors    65  162500\n",
       "7519 2020-12-30  Afternoon   VIC  Seniors    62  155000\n",
       "\n",
       "[123 rows x 6 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for outliers using IQR ranges\n",
    "q1, q3 = df['Sales'].quantile([0.25, 0.75]).values\n",
    "print(q1, q3)\n",
    "iqr = q3 - q1\n",
    "print(iqr)\n",
    "upper_bound = q3 + (1.5*iqr)\n",
    "lower_bound = q1 - (1.5*iqr)\n",
    "print(upper_bound, lower_bound)\n",
    "#There are some outliers which need not be removed for the current usecase as they are still valid Sales\n",
    "df[ (df['Sales'] > upper_bound) | (df['Sales'] < lower_bound)]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bb1c76d",
   "metadata": {},
   "source": [
    "**Data Standardization and data normalization**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8bdf94c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>State</th>\n",
       "      <th>Group</th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Unit_stand</th>\n",
       "      <th>Sales_stand</th>\n",
       "      <th>Unit_norm</th>\n",
       "      <th>Sales_norm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Kids</td>\n",
       "      <td>8</td>\n",
       "      <td>20000</td>\n",
       "      <td>-0.775530</td>\n",
       "      <td>-0.775530</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>0.095238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Men</td>\n",
       "      <td>8</td>\n",
       "      <td>20000</td>\n",
       "      <td>-0.775530</td>\n",
       "      <td>-0.775530</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>0.095238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Women</td>\n",
       "      <td>4</td>\n",
       "      <td>10000</td>\n",
       "      <td>-1.085574</td>\n",
       "      <td>-1.085574</td>\n",
       "      <td>0.031746</td>\n",
       "      <td>0.031746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>0.206349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>WA</td>\n",
       "      <td>Kids</td>\n",
       "      <td>3</td>\n",
       "      <td>7500</td>\n",
       "      <td>-1.163085</td>\n",
       "      <td>-1.163085</td>\n",
       "      <td>0.015873</td>\n",
       "      <td>0.015873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7555</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>14</td>\n",
       "      <td>35000</td>\n",
       "      <td>-0.310464</td>\n",
       "      <td>-0.310464</td>\n",
       "      <td>0.190476</td>\n",
       "      <td>0.190476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7556</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Kids</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>0.206349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7557</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Men</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>0.206349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7558</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Women</td>\n",
       "      <td>11</td>\n",
       "      <td>27500</td>\n",
       "      <td>-0.542997</td>\n",
       "      <td>-0.542997</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7559</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>13</td>\n",
       "      <td>32500</td>\n",
       "      <td>-0.387975</td>\n",
       "      <td>-0.387975</td>\n",
       "      <td>0.174603</td>\n",
       "      <td>0.174603</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7560 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date       Time State    Group  Unit  Sales  Unit_stand  \\\n",
       "0    2020-10-01    Morning    WA     Kids     8  20000   -0.775530   \n",
       "1    2020-10-01    Morning    WA      Men     8  20000   -0.775530   \n",
       "2    2020-10-01    Morning    WA    Women     4  10000   -1.085574   \n",
       "3    2020-10-01    Morning    WA  Seniors    15  37500   -0.232953   \n",
       "4    2020-10-01  Afternoon    WA     Kids     3   7500   -1.163085   \n",
       "...         ...        ...   ...      ...   ...    ...         ...   \n",
       "7555 2020-12-30  Afternoon   TAS  Seniors    14  35000   -0.310464   \n",
       "7556 2020-12-30    Evening   TAS     Kids    15  37500   -0.232953   \n",
       "7557 2020-12-30    Evening   TAS      Men    15  37500   -0.232953   \n",
       "7558 2020-12-30    Evening   TAS    Women    11  27500   -0.542997   \n",
       "7559 2020-12-30    Evening   TAS  Seniors    13  32500   -0.387975   \n",
       "\n",
       "      Sales_stand  Unit_norm  Sales_norm  \n",
       "0       -0.775530   0.095238    0.095238  \n",
       "1       -0.775530   0.095238    0.095238  \n",
       "2       -1.085574   0.031746    0.031746  \n",
       "3       -0.232953   0.206349    0.206349  \n",
       "4       -1.163085   0.015873    0.015873  \n",
       "...           ...        ...         ...  \n",
       "7555    -0.310464   0.190476    0.190476  \n",
       "7556    -0.232953   0.206349    0.206349  \n",
       "7557    -0.232953   0.206349    0.206349  \n",
       "7558    -0.542997   0.142857    0.142857  \n",
       "7559    -0.387975   0.174603    0.174603  \n",
       "\n",
       "[7560 rows x 10 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Data scaling for numerical columns Unit and Sales using normalization(minmax scaling)/standardization(z-scores)\n",
    "for i in ['Unit', 'Sales']:\n",
    "    df[i + '_stand'] = (df[i] - df[i].mean())/df[i].std()\n",
    "for i in ['Unit', 'Sales']:\n",
    "    df[i + '_norm'] = (df[i] - df[i].min())/(df[i].max() - df[i].min())\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3538bc80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WA     0.142857\n",
       "NT     0.142857\n",
       "SA     0.142857\n",
       "VIC    0.142857\n",
       "QLD    0.142857\n",
       "NSW    0.142857\n",
       "TAS    0.142857\n",
       "Name: State, dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for state wise distribution of data. Data for each state is uniformly distributed\n",
    "df['State'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0151b78",
   "metadata": {},
   "source": [
    "**Using groupby to check for sales in each period of time and grouping by State/Group/Time to find price per unit**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f9ea0773",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Unit_stand</th>\n",
       "      <th>Sales_stand</th>\n",
       "      <th>Unit_norm</th>\n",
       "      <th>Sales_norm</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afternoon</th>\n",
       "      <td>45603</td>\n",
       "      <td>114007500</td>\n",
       "      <td>17.775845</td>\n",
       "      <td>17.775845</td>\n",
       "      <td>643.857143</td>\n",
       "      <td>643.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Evening</th>\n",
       "      <td>44835</td>\n",
       "      <td>112087500</td>\n",
       "      <td>-41.752566</td>\n",
       "      <td>-41.752566</td>\n",
       "      <td>631.666667</td>\n",
       "      <td>631.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Morning</th>\n",
       "      <td>45683</td>\n",
       "      <td>114207500</td>\n",
       "      <td>23.976721</td>\n",
       "      <td>23.976721</td>\n",
       "      <td>645.126984</td>\n",
       "      <td>645.126984</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Unit      Sales  Unit_stand  Sales_stand   Unit_norm  Sales_norm\n",
       "Time                                                                        \n",
       "Afternoon  45603  114007500   17.775845    17.775845  643.857143  643.857143\n",
       "Evening    44835  112087500  -41.752566   -41.752566  631.666667  631.666667\n",
       "Morning    45683  114207500   23.976721    23.976721  645.126984  645.126984"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#check for sum of sales at different time periods. (Morning has highest sales)\n",
    "df.groupby('Time').sum('Sales')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ca53af6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State  Group    Time     \n",
       "WA     Women    Afternoon    2500.0\n",
       "NT     Seniors  Morning      2500.0\n",
       "WA     Women    Morning      2500.0\n",
       "       Seniors  Afternoon    2500.0\n",
       "                Evening      2500.0\n",
       "                              ...  \n",
       "VIC    Seniors  Afternoon    2500.0\n",
       "       Men      Evening      2500.0\n",
       "       Women    Evening      2500.0\n",
       "       Kids     Morning      2500.0\n",
       "       Seniors  Morning      2500.0\n",
       "Name: price_per_unit, Length: 84, dtype: float64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Groupby State,Group,Time and find price per unit\n",
    "grp = df.groupby(['State', 'Group', 'Time']).sum(numeric_only=True).sort_values('Sales')\n",
    "grp['price_per_unit'] = grp['Sales']/grp['Unit']\n",
    "#price is same for all\n",
    "grp['price_per_unit']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77ecf4df",
   "metadata": {},
   "source": [
    "**Grouping using Pivot Tables** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "8cea5454",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>State</th>\n",
       "      <th>Group</th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Unit_stand</th>\n",
       "      <th>Sales_stand</th>\n",
       "      <th>Unit_norm</th>\n",
       "      <th>Sales_norm</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Kids</td>\n",
       "      <td>8</td>\n",
       "      <td>20000</td>\n",
       "      <td>-0.775530</td>\n",
       "      <td>-0.775530</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Men</td>\n",
       "      <td>8</td>\n",
       "      <td>20000</td>\n",
       "      <td>-0.775530</td>\n",
       "      <td>-0.775530</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>0.095238</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Women</td>\n",
       "      <td>4</td>\n",
       "      <td>10000</td>\n",
       "      <td>-1.085574</td>\n",
       "      <td>-1.085574</td>\n",
       "      <td>0.031746</td>\n",
       "      <td>0.031746</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>WA</td>\n",
       "      <td>Kids</td>\n",
       "      <td>3</td>\n",
       "      <td>7500</td>\n",
       "      <td>-1.163085</td>\n",
       "      <td>-1.163085</td>\n",
       "      <td>0.015873</td>\n",
       "      <td>0.015873</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7555</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>14</td>\n",
       "      <td>35000</td>\n",
       "      <td>-0.310464</td>\n",
       "      <td>-0.310464</td>\n",
       "      <td>0.190476</td>\n",
       "      <td>0.190476</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7556</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Kids</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7557</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Men</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>-0.232953</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>0.206349</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7558</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Women</td>\n",
       "      <td>11</td>\n",
       "      <td>27500</td>\n",
       "      <td>-0.542997</td>\n",
       "      <td>-0.542997</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7559</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>13</td>\n",
       "      <td>32500</td>\n",
       "      <td>-0.387975</td>\n",
       "      <td>-0.387975</td>\n",
       "      <td>0.174603</td>\n",
       "      <td>0.174603</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7560 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date       Time State    Group  Unit  Sales  Unit_stand  \\\n",
       "0    2020-10-01    Morning    WA     Kids     8  20000   -0.775530   \n",
       "1    2020-10-01    Morning    WA      Men     8  20000   -0.775530   \n",
       "2    2020-10-01    Morning    WA    Women     4  10000   -1.085574   \n",
       "3    2020-10-01    Morning    WA  Seniors    15  37500   -0.232953   \n",
       "4    2020-10-01  Afternoon    WA     Kids     3   7500   -1.163085   \n",
       "...         ...        ...   ...      ...   ...    ...         ...   \n",
       "7555 2020-12-30  Afternoon   TAS  Seniors    14  35000   -0.310464   \n",
       "7556 2020-12-30    Evening   TAS     Kids    15  37500   -0.232953   \n",
       "7557 2020-12-30    Evening   TAS      Men    15  37500   -0.232953   \n",
       "7558 2020-12-30    Evening   TAS    Women    11  27500   -0.542997   \n",
       "7559 2020-12-30    Evening   TAS  Seniors    13  32500   -0.387975   \n",
       "\n",
       "      Sales_stand  Unit_norm  Sales_norm  day  \n",
       "0       -0.775530   0.095238    0.095238    3  \n",
       "1       -0.775530   0.095238    0.095238    3  \n",
       "2       -1.085574   0.031746    0.031746    3  \n",
       "3       -0.232953   0.206349    0.206349    3  \n",
       "4       -1.163085   0.015873    0.015873    3  \n",
       "...           ...        ...         ...  ...  \n",
       "7555    -0.310464   0.190476    0.190476    2  \n",
       "7556    -0.232953   0.206349    0.206349    2  \n",
       "7557    -0.232953   0.206349    0.206349    2  \n",
       "7558    -0.542997   0.142857    0.142857    2  \n",
       "7559    -0.387975   0.174603    0.174603    2  \n",
       "\n",
       "[7560 rows x 11 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Add day column\n",
    "df['day'] = df['Date'].dt.day_of_week\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "0cc2aaba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>day</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Group</th>\n",
       "      <th>Time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Kids</th>\n",
       "      <th>Afternoon</th>\n",
       "      <td>4132500</td>\n",
       "      <td>4412500</td>\n",
       "      <td>4227500</td>\n",
       "      <td>4002500</td>\n",
       "      <td>4062500</td>\n",
       "      <td>3712500</td>\n",
       "      <td>3952500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Evening</th>\n",
       "      <td>4050000</td>\n",
       "      <td>4272500</td>\n",
       "      <td>4107500</td>\n",
       "      <td>4155000</td>\n",
       "      <td>3877500</td>\n",
       "      <td>3707500</td>\n",
       "      <td>3882500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Morning</th>\n",
       "      <td>3930000</td>\n",
       "      <td>4147500</td>\n",
       "      <td>4035000</td>\n",
       "      <td>4340000</td>\n",
       "      <td>4075000</td>\n",
       "      <td>4037500</td>\n",
       "      <td>3952500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Men</th>\n",
       "      <th>Afternoon</th>\n",
       "      <td>4185000</td>\n",
       "      <td>4005000</td>\n",
       "      <td>4267500</td>\n",
       "      <td>4255000</td>\n",
       "      <td>4252500</td>\n",
       "      <td>3787500</td>\n",
       "      <td>4015000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Evening</th>\n",
       "      <td>4120000</td>\n",
       "      <td>4005000</td>\n",
       "      <td>4305000</td>\n",
       "      <td>4062500</td>\n",
       "      <td>3987500</td>\n",
       "      <td>3802500</td>\n",
       "      <td>3940000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Morning</th>\n",
       "      <td>4045000</td>\n",
       "      <td>4055000</td>\n",
       "      <td>4260000</td>\n",
       "      <td>3997500</td>\n",
       "      <td>4190000</td>\n",
       "      <td>4030000</td>\n",
       "      <td>4182500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Seniors</th>\n",
       "      <th>Afternoon</th>\n",
       "      <td>3812500</td>\n",
       "      <td>4247500</td>\n",
       "      <td>4272500</td>\n",
       "      <td>3915000</td>\n",
       "      <td>3845000</td>\n",
       "      <td>3830000</td>\n",
       "      <td>4272500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Evening</th>\n",
       "      <td>3662500</td>\n",
       "      <td>4122500</td>\n",
       "      <td>3997500</td>\n",
       "      <td>4102500</td>\n",
       "      <td>3732500</td>\n",
       "      <td>3722500</td>\n",
       "      <td>3927500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Morning</th>\n",
       "      <td>4112500</td>\n",
       "      <td>4297500</td>\n",
       "      <td>4107500</td>\n",
       "      <td>4292500</td>\n",
       "      <td>4000000</td>\n",
       "      <td>3925000</td>\n",
       "      <td>3840000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Women</th>\n",
       "      <th>Afternoon</th>\n",
       "      <td>4202500</td>\n",
       "      <td>4205000</td>\n",
       "      <td>3995000</td>\n",
       "      <td>4232500</td>\n",
       "      <td>3950000</td>\n",
       "      <td>3755000</td>\n",
       "      <td>4202500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Evening</th>\n",
       "      <td>4022500</td>\n",
       "      <td>4177500</td>\n",
       "      <td>4157500</td>\n",
       "      <td>3892500</td>\n",
       "      <td>4030000</td>\n",
       "      <td>3992500</td>\n",
       "      <td>4272500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Morning</th>\n",
       "      <td>3775000</td>\n",
       "      <td>4380000</td>\n",
       "      <td>4212500</td>\n",
       "      <td>4157500</td>\n",
       "      <td>3997500</td>\n",
       "      <td>3942500</td>\n",
       "      <td>3890000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "day                      0        1        2        3        4        5  \\\n",
       "Group   Time                                                              \n",
       "Kids    Afternoon  4132500  4412500  4227500  4002500  4062500  3712500   \n",
       "        Evening    4050000  4272500  4107500  4155000  3877500  3707500   \n",
       "        Morning    3930000  4147500  4035000  4340000  4075000  4037500   \n",
       "Men     Afternoon  4185000  4005000  4267500  4255000  4252500  3787500   \n",
       "        Evening    4120000  4005000  4305000  4062500  3987500  3802500   \n",
       "        Morning    4045000  4055000  4260000  3997500  4190000  4030000   \n",
       "Seniors Afternoon  3812500  4247500  4272500  3915000  3845000  3830000   \n",
       "        Evening    3662500  4122500  3997500  4102500  3732500  3722500   \n",
       "        Morning    4112500  4297500  4107500  4292500  4000000  3925000   \n",
       "Women   Afternoon  4202500  4205000  3995000  4232500  3950000  3755000   \n",
       "        Evening    4022500  4177500  4157500  3892500  4030000  3992500   \n",
       "        Morning    3775000  4380000  4212500  4157500  3997500  3942500   \n",
       "\n",
       "day                      6  \n",
       "Group   Time                \n",
       "Kids    Afternoon  3952500  \n",
       "        Evening    3882500  \n",
       "        Morning    3952500  \n",
       "Men     Afternoon  4015000  \n",
       "        Evening    3940000  \n",
       "        Morning    4182500  \n",
       "Seniors Afternoon  4272500  \n",
       "        Evening    3927500  \n",
       "        Morning    3840000  \n",
       "Women   Afternoon  4202500  \n",
       "        Evening    4272500  \n",
       "        Morning    3890000  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.pivot_table(index=['Group', 'Time'], columns='day', values='Sales', aggfunc='sum')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62cf9722",
   "metadata": {},
   "source": [
    "**Data Analysis:: describe data for mean, median, mode, SD, determine group/state with high/low sales, generate reports for analysis made**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c61f47a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7560.000000</td>\n",
       "      <td>7560.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>18.005423</td>\n",
       "      <td>45013.558201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>12.901403</td>\n",
       "      <td>32253.506944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>5000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>14.000000</td>\n",
       "      <td>35000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>26.000000</td>\n",
       "      <td>65000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>65.000000</td>\n",
       "      <td>162500.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Unit          Sales\n",
       "count  7560.000000    7560.000000\n",
       "mean     18.005423   45013.558201\n",
       "std      12.901403   32253.506944\n",
       "min       2.000000    5000.000000\n",
       "25%       8.000000   20000.000000\n",
       "50%      14.000000   35000.000000\n",
       "75%      26.000000   65000.000000\n",
       "max      65.000000  162500.000000"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#describe Unit, Sales columns for count, mean, std, min, max, quartiles\n",
    "df[['Unit', 'Sales']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "98f41f37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unit        14.0\n",
       "Sales    35000.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#median\n",
    "df[['Unit', 'Sales']].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "9ffe2198",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9</td>\n",
       "      <td>22500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unit  Sales\n",
       "0     9  22500"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#mode\n",
    "df[['Unit', 'Sales']].mode()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f136e245",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Unit_stand</th>\n",
       "      <th>Sales_stand</th>\n",
       "      <th>Unit_norm</th>\n",
       "      <th>Sales_norm</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Group</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Seniors</th>\n",
       "      <td>33615</td>\n",
       "      <td>84037500</td>\n",
       "      <td>-32.186422</td>\n",
       "      <td>-32.186422</td>\n",
       "      <td>473.571429</td>\n",
       "      <td>473.571429</td>\n",
       "      <td>5628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Kids</th>\n",
       "      <td>34029</td>\n",
       "      <td>85072500</td>\n",
       "      <td>-0.096889</td>\n",
       "      <td>-0.096889</td>\n",
       "      <td>480.142857</td>\n",
       "      <td>480.142857</td>\n",
       "      <td>5628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Women</th>\n",
       "      <td>34177</td>\n",
       "      <td>85442500</td>\n",
       "      <td>11.374732</td>\n",
       "      <td>11.374732</td>\n",
       "      <td>482.492063</td>\n",
       "      <td>482.492063</td>\n",
       "      <td>5628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Men</th>\n",
       "      <td>34300</td>\n",
       "      <td>85750000</td>\n",
       "      <td>20.908579</td>\n",
       "      <td>20.908579</td>\n",
       "      <td>484.444444</td>\n",
       "      <td>484.444444</td>\n",
       "      <td>5628</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Unit     Sales  Unit_stand  Sales_stand   Unit_norm  Sales_norm  \\\n",
       "Group                                                                       \n",
       "Seniors  33615  84037500  -32.186422   -32.186422  473.571429  473.571429   \n",
       "Kids     34029  85072500   -0.096889    -0.096889  480.142857  480.142857   \n",
       "Women    34177  85442500   11.374732    11.374732  482.492063  482.492063   \n",
       "Men      34300  85750000   20.908579    20.908579  484.444444  484.444444   \n",
       "\n",
       "          day  \n",
       "Group          \n",
       "Seniors  5628  \n",
       "Kids     5628  \n",
       "Women    5628  \n",
       "Men      5628  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#determine group generating highest sales and group generating lowest sales\n",
    "df.groupby('Group').sum('Sales').sort_values('Sales')\n",
    "#'Seniors' group is generating lowest sales and 'Men' group is generating highest sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8cbe0fbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "      <th>Unit_stand</th>\n",
       "      <th>Sales_stand</th>\n",
       "      <th>Unit_norm</th>\n",
       "      <th>Sales_norm</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>State</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>WA</th>\n",
       "      <td>8861</td>\n",
       "      <td>22152500</td>\n",
       "      <td>-820.442345</td>\n",
       "      <td>-820.442345</td>\n",
       "      <td>106.365079</td>\n",
       "      <td>106.365079</td>\n",
       "      <td>3216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NT</th>\n",
       "      <td>9032</td>\n",
       "      <td>22580000</td>\n",
       "      <td>-807.187972</td>\n",
       "      <td>-807.187972</td>\n",
       "      <td>109.079365</td>\n",
       "      <td>109.079365</td>\n",
       "      <td>3216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TAS</th>\n",
       "      <td>9104</td>\n",
       "      <td>22760000</td>\n",
       "      <td>-801.607183</td>\n",
       "      <td>-801.607183</td>\n",
       "      <td>110.222222</td>\n",
       "      <td>110.222222</td>\n",
       "      <td>3216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QLD</th>\n",
       "      <td>13367</td>\n",
       "      <td>33417500</td>\n",
       "      <td>-471.177999</td>\n",
       "      <td>-471.177999</td>\n",
       "      <td>177.888889</td>\n",
       "      <td>177.888889</td>\n",
       "      <td>3216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SA</th>\n",
       "      <td>23543</td>\n",
       "      <td>58857500</td>\n",
       "      <td>317.573440</td>\n",
       "      <td>317.573440</td>\n",
       "      <td>339.412698</td>\n",
       "      <td>339.412698</td>\n",
       "      <td>3216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NSW</th>\n",
       "      <td>29988</td>\n",
       "      <td>74970000</td>\n",
       "      <td>817.131520</td>\n",
       "      <td>817.131520</td>\n",
       "      <td>441.714286</td>\n",
       "      <td>441.714286</td>\n",
       "      <td>3216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VIC</th>\n",
       "      <td>42226</td>\n",
       "      <td>105565000</td>\n",
       "      <td>1765.710539</td>\n",
       "      <td>1765.710539</td>\n",
       "      <td>635.968254</td>\n",
       "      <td>635.968254</td>\n",
       "      <td>3216</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Unit      Sales   Unit_stand  Sales_stand   Unit_norm  Sales_norm  \\\n",
       "State                                                                       \n",
       "WA      8861   22152500  -820.442345  -820.442345  106.365079  106.365079   \n",
       "NT      9032   22580000  -807.187972  -807.187972  109.079365  109.079365   \n",
       "TAS     9104   22760000  -801.607183  -801.607183  110.222222  110.222222   \n",
       "QLD    13367   33417500  -471.177999  -471.177999  177.888889  177.888889   \n",
       "SA     23543   58857500   317.573440   317.573440  339.412698  339.412698   \n",
       "NSW    29988   74970000   817.131520   817.131520  441.714286  441.714286   \n",
       "VIC    42226  105565000  1765.710539  1765.710539  635.968254  635.968254   \n",
       "\n",
       "        day  \n",
       "State        \n",
       "WA     3216  \n",
       "NT     3216  \n",
       "TAS    3216  \n",
       "QLD    3216  \n",
       "SA     3216  \n",
       "NSW    3216  \n",
       "VIC    3216  "
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#determine state generating highest sales and state generating lowest sales\n",
    "df.groupby('State').sum('Sales').sort_values('Sales')\n",
    "#'WA' state is generating lowest sales and 'VIC' state is generating highest sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "52fef3dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>State</th>\n",
       "      <th>Group</th>\n",
       "      <th>Unit</th>\n",
       "      <th>Sales</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>week</th>\n",
       "      <th>quarter</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Kids</td>\n",
       "      <td>8</td>\n",
       "      <td>20000</td>\n",
       "      <td>3</td>\n",
       "      <td>October</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Men</td>\n",
       "      <td>8</td>\n",
       "      <td>20000</td>\n",
       "      <td>3</td>\n",
       "      <td>October</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Women</td>\n",
       "      <td>4</td>\n",
       "      <td>10000</td>\n",
       "      <td>3</td>\n",
       "      <td>October</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Morning</td>\n",
       "      <td>WA</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "      <td>3</td>\n",
       "      <td>October</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>WA</td>\n",
       "      <td>Kids</td>\n",
       "      <td>3</td>\n",
       "      <td>7500</td>\n",
       "      <td>3</td>\n",
       "      <td>October</td>\n",
       "      <td>40</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7555</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Afternoon</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>14</td>\n",
       "      <td>35000</td>\n",
       "      <td>2</td>\n",
       "      <td>December</td>\n",
       "      <td>53</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7556</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Kids</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "      <td>2</td>\n",
       "      <td>December</td>\n",
       "      <td>53</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7557</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Men</td>\n",
       "      <td>15</td>\n",
       "      <td>37500</td>\n",
       "      <td>2</td>\n",
       "      <td>December</td>\n",
       "      <td>53</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7558</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Women</td>\n",
       "      <td>11</td>\n",
       "      <td>27500</td>\n",
       "      <td>2</td>\n",
       "      <td>December</td>\n",
       "      <td>53</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7559</th>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>Evening</td>\n",
       "      <td>TAS</td>\n",
       "      <td>Seniors</td>\n",
       "      <td>13</td>\n",
       "      <td>32500</td>\n",
       "      <td>2</td>\n",
       "      <td>December</td>\n",
       "      <td>53</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7560 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date        Time State     Group  Unit  Sales  day     month  week  \\\n",
       "0    2020-10-01     Morning    WA      Kids     8  20000    3   October    40   \n",
       "1    2020-10-01     Morning    WA       Men     8  20000    3   October    40   \n",
       "2    2020-10-01     Morning    WA     Women     4  10000    3   October    40   \n",
       "3    2020-10-01     Morning    WA   Seniors    15  37500    3   October    40   \n",
       "4    2020-10-01   Afternoon    WA      Kids     3   7500    3   October    40   \n",
       "...         ...         ...   ...       ...   ...    ...  ...       ...   ...   \n",
       "7555 2020-12-30   Afternoon   TAS   Seniors    14  35000    2  December    53   \n",
       "7556 2020-12-30     Evening   TAS      Kids    15  37500    2  December    53   \n",
       "7557 2020-12-30     Evening   TAS       Men    15  37500    2  December    53   \n",
       "7558 2020-12-30     Evening   TAS     Women    11  27500    2  December    53   \n",
       "7559 2020-12-30     Evening   TAS   Seniors    13  32500    2  December    53   \n",
       "\n",
       "      quarter  \n",
       "0           4  \n",
       "1           4  \n",
       "2           4  \n",
       "3           4  \n",
       "4           4  \n",
       "...       ...  \n",
       "7555        4  \n",
       "7556        4  \n",
       "7557        4  \n",
       "7558        4  \n",
       "7559        4  \n",
       "\n",
       "[7560 rows x 10 columns]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Add day, week,month, quarter columns\n",
    "df['day'] = df['Date'].dt.day_of_week\n",
    "df['month'] = df['Date'].dt.month_name()\n",
    "df['week'] = df['Date'].dt.isocalendar().week\n",
    "df['quarter'] = df['Date'].dt.quarter\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "cca15d9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Group    month   \n",
       "Kids     December    33555000\n",
       "         November    22882500\n",
       "         October     28635000\n",
       "Men      December    34250000\n",
       "         November    22615000\n",
       "         October     28885000\n",
       "Seniors  December    33150000\n",
       "         November    22322500\n",
       "         October     28565000\n",
       "Women    December    34375000\n",
       "         November    22862500\n",
       "         October     28205000\n",
       "Name: Sales, dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# monthly sales report for each Group\n",
    "df.groupby(['Group', 'month']).sum(numeric_only=True).sort_values(['Group', 'month'])['Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "67ad5f23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Group    week\n",
       "Kids     40      3690000\n",
       "         41      7020000\n",
       "         42      6707500\n",
       "         43      6525000\n",
       "         44      5490000\n",
       "         45      5125000\n",
       "         46      5315000\n",
       "         47      5302500\n",
       "         48      5577500\n",
       "         49      7362500\n",
       "         50      8030000\n",
       "         51      7765000\n",
       "         52      7630000\n",
       "         53      3532500\n",
       "Men      40      3730000\n",
       "         41      6807500\n",
       "         42      6710000\n",
       "         43      6872500\n",
       "         44      5507500\n",
       "         45      5335000\n",
       "         46      5242500\n",
       "         47      5025000\n",
       "         48      5482500\n",
       "         49      7505000\n",
       "         50      7802500\n",
       "         51      7990000\n",
       "         52      8337500\n",
       "         53      3402500\n",
       "Seniors  40      3782500\n",
       "         41      6737500\n",
       "         42      6470000\n",
       "         43      6757500\n",
       "         44      5540000\n",
       "         45      4962500\n",
       "         46      5397500\n",
       "         47      5200000\n",
       "         48      5302500\n",
       "         49      7217500\n",
       "         50      7805000\n",
       "         51      7772500\n",
       "         52      7685000\n",
       "         53      3407500\n",
       "Women    40      3842500\n",
       "         41      6437500\n",
       "         42      6752500\n",
       "         43      6660000\n",
       "         44      5270000\n",
       "         45      5442500\n",
       "         46      5217500\n",
       "         47      5585000\n",
       "         48      5115000\n",
       "         49      7537500\n",
       "         50      7887500\n",
       "         51      8127500\n",
       "         52      8117500\n",
       "         53      3450000\n",
       "Name: Sales, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# weekly sales report for each Group\n",
    "df.groupby(['Group', 'week']).sum(numeric_only=True).sort_values(['Group', 'week'])['Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "4dd71c1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Group    quarter\n",
       "Kids     4          85072500\n",
       "Men      4          85750000\n",
       "Seniors  4          84037500\n",
       "Women    4          85442500\n",
       "Name: Sales, dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# quarterly sales report for each Group\n",
    "df.groupby(['Group', 'quarter']).sum(numeric_only=True).sort_values(['Group', 'quarter'])['Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "874b5a8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State  month   \n",
       "NSW    December    28472500\n",
       "       November    21490000\n",
       "       October     25007500\n",
       "NT     December     9100000\n",
       "       November     5257500\n",
       "       October      8222500\n",
       "QLD    December    14187500\n",
       "       November     8110000\n",
       "       October     11120000\n",
       "SA     December    22715000\n",
       "       November    15532500\n",
       "       October     20610000\n",
       "TAS    December     9200000\n",
       "       November     5545000\n",
       "       October      8015000\n",
       "VIC    December    42592500\n",
       "       November    29530000\n",
       "       October     33442500\n",
       "WA     December     9062500\n",
       "       November     5217500\n",
       "       October      7872500\n",
       "Name: Sales, dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# monthly sales report for each State\n",
    "df.groupby(['State', 'month']).sum(numeric_only=True).sort_values(['State', 'month'])['Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "755a4e71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State  week\n",
       "NSW    40      3382500\n",
       "       41      5892500\n",
       "       42      5717500\n",
       "       43      5922500\n",
       "       44      4822500\n",
       "                ...   \n",
       "WA     49      2060000\n",
       "       50      2145000\n",
       "       51      2005000\n",
       "       52      2092500\n",
       "       53       925000\n",
       "Name: Sales, Length: 98, dtype: int64"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# weekly sales report for each State\n",
    "df.groupby(['State', 'week']).sum(numeric_only=True).sort_values(['State', 'week'])['Sales']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "801db4d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "State  quarter\n",
       "NSW    4           74970000\n",
       "NT     4           22580000\n",
       "QLD    4           33417500\n",
       "SA     4           58857500\n",
       "TAS    4           22760000\n",
       "VIC    4          105565000\n",
       "WA     4           22152500\n",
       "Name: Sales, dtype: int64"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# quarterly sales report for each State\n",
    "df.groupby(['State', 'quarter']).sum(numeric_only=True).sort_values(['State', 'quarter'])['Sales']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "428dfc4e",
   "metadata": {},
   "source": [
    "**DATA VISUALIZATION-----state-wise, group-wise, time of the day analysis**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "4ac3a6c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Group,month'>"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pivot = df.pivot_table(index=['Group', 'month'], columns='State', values='Sales', aggfunc='sum')\n",
    "#plt.ticklabel_format(style = 'plain')\n",
    "pivot.plot.bar(stacked=True)\n",
    "\n",
    "\n",
    "#sns.barplot(data=pivot)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
